# This is needed for some critical utilities like bash which have been installed 
# on a path /opt/homebrew/bin/ for M1 macs and that path needs to be used first
if [ -f /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi
# Add logging to your history to make searching easier

export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend                      # append to history, don't overwrite it
mkdir -p ~/.logs
# The two commands below are correlated: The format for input and output needs to be the same.
counter=0
shopt -s nullglob
for file in $(ls ~/.logs/bash-history-*.log); do
    while IFS=' ' read -r timestamp filepath command; do
        if [ "$counter" -lt "$HISTSIZE" ]; then
            history -s "$command"
            if [ "$?" -ne 0 ]; then
                echo "[DEBUG]: bad command: $command in file: $file"
            fi
            ((counter++))
        else
            break 2
        fi
    done < "$file"
done

export PROMPT_COMMAND='exit_status=$? && if [ "$(id -u)" -ne 0 ]; then
    last_command=$(history 1 | sed "s/^[ ]*[0-9]*[ ]*//")
    
    # Log the command only if it was successful
    if [ "${exit_status}" -eq 0 ]; then
        echo "$(date "+%Y-%m-%d.%H:%M:%S") $(pwd) $last_command" >> ~/.logs/bash-history-$(date "+%Y-%m-%d").log
    fi
fi; history -a; history -c; history -r'

# useful for retaining prompt color when screen starts
# export force_color_prompt=yes
# set -o vi
# if [ -f /usr/share/scm/scm-prompt.sh ]; then
#   source /usr/share/scm/scm-prompt.sh
# fi

export PS1="\\e[1;33m\\A:\\w\\e[m\\n>> "
export PATH=~/bin:$PATH

# For pyenv
#export PATH="/home/sid/.pyenv/bin:$PATH"
#eval "$(pyenv init -)" || echo ""
#eval "$(pyenv virtualenv-init -)" || echo ""

#(FIXME: Make his for mac only) For java home in my mac osx
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "TODO(Sid): Decide to set java home if you need to"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    export JAVA_HOME=$(/usr/libexec/java_home -v 17)
    export PATH=$(/usr/libexec/java_home -v 17)/bin:$PATH
fi
# export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
# export PATH=$(/usr/libexec/java_home -v 1.8)/bin:$PATH
# For maven
if [ -f "/usr/local/apache-maven/bin/mvn" ]; then
    export PATH=$PATH:/usr/local/apache-maven/bin/
fi

# Temporary
export iview_2017=~/Dropbox/workspace/iview_2017/python/interactive-coding-challenges/

# For solr
export SOLR_HOME="${HOME}/opt/solr-4.7.0"

# When starting vim in TMUX it does not remember the colorscheme. Fix this by forcing tmux to recognize 256 colors
# https://stackoverflow.com/questions/10158508/lose-vim-colorscheme-in-tmux-mode
alias tmux="TERM=screen-256color-bce tmux"

# Integrating tmux shell
# test -e "${HOME}/.iterm2_shell_integration.bash" && source "${HOME}/.iterm2_shell_integration.bash" || true

# Support for tmux to be able to warn upon command completion.
# [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
# precmd() {  echo -e '\a'; }


# These are meant to provide hooks when one executes and command or each time the
# command prompt is displayed. Being hooks they are quite powerful. Need to research them.
# [[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
# precmd() {  echo -e '\a'; }

# Set PATH, MANPATH, etc., for Homebrew.
. "$HOME/.cargo/env"
export PATH="/opt/homebrew/opt/mozjpeg/bin:$PATH"

export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH=$HOME/development/flutter/bin:$PATH
export PATH=$HOME/development/flutter:$PATH


export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"
export PATH="/opt/homebrew/opt/mozjpeg/bin:$PATH"

if command -v pyenv 1>/dev/null 2>&1; then
  echo "Initializing pyenv"
  eval "$(pyenv init -)"
fi

# Use lessy to color code a yaml file piped to less.
alias lessy='pygmentize -l yaml -f console256 -O style=monokai | less -R'
echo -e "\\e[0;32mLoaded your bash_profile\\e[0m"

echo $(bash --version) 

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniconda/base/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniconda/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniconda/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
#
conda config --set auto_activate_base false

# Created by `pipx` on 2025-01-29 04:39:11
export PATH="$PATH:/Users/sid/.local/bin"
export PATH=/opt/homebrew/lib/ruby/gems/3.4.0/bin/:$PATH
export PATH=/opt/homebrew/lib/ruby/gems/3.4.0/gems/:$PATH
export PATH="/Users/sid/development/flutter/bin:$PATH"
